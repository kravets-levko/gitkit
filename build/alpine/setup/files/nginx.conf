# This file is automatically generated.
# Don't edit it until you clearly understand what you're going to do.

server {
  listen 80;
  listen [::]:80;

  server_name "";

  root "${APPLICATION_PATH}";

  location @app_entry_point {
    root "${APPLICATION_PATH}/src";
    include fastcgi_params;
    fastcgi_param  SCRIPT_FILENAME    $document_root/index.php;
    fastcgi_param  SCRIPT_NAME        /index.php;
    fastcgi_param  GITKIT_REPOSITORIES_ROOT    "${GIT_REPOSITORIES_PATH}";
    fastcgi_param  GITKIT_GIT_BINARY           "${GIT_BINARY}";
    fastcgi_param  GITKIT_GIT_USER             "${GITKIT_USER}";
    fastcgi_param  GITKIT_SSH_KEYGEN_BINARY    "${SSH_KEYGEN_BINARY}";
    fastcgi_param  GITKIT_SSH_AUTHORIZED_KEYS  "${SSHD_AUTHORISED_KEYS}";
    fastcgi_pass "unix:${PHPFPM_SOCKET}";
  }

  location / {
    root "${APPLICATION_PATH}/public";
    try_files $uri @app_entry_point;
  }

  # Requires `fcgiwrap` to work
  location ~* ^(/[^/]+/[^/]+.git)(/.*)?$ {
    root "${GIT_REPOSITORIES_PATH}";
    try_files "$1/" @app_entry_point;

    include fastcgi_params;
    fastcgi_param  SCRIPT_FILENAME      "${GIT_HTTP_BACKEND}";
    fastcgi_param  GIT_PROJECT_ROOT     $document_root;
    fastcgi_param  GIT_HTTP_EXPORT_ALL  yes;
    # try_files will add slash to $uri, and git operations will fail with 404
    # therefore use captured groups from original uri
    fastcgi_param  PATH_INFO            "$1$2";
    # any username - should be fixed
    fastcgi_param  REMOTE_USER          "${GITKIT_USER}";
    fastcgi_pass "unix:${FCGIWRAP_SOCKET}";
  }

}
